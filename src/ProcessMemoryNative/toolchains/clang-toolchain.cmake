set(CMAKE_C_COMPILER "clang")
set(CMAKE_CXX_COMPILER "clang++")

set(CMAKE_C_STANDARD 23) # 90, 99, 11, 17, 23
set(CMAKE_C_STANDARD_REQUIRED TRUE)
set(CMAKE_CXX_STANDARD 26)  # 98, 11, 14, 17, 20, 23, 26
set(CMAKE_CXX_STANDARD_REQUIRED TRUE)

if(DEFINED ARCH)
    if(ARCH STREQUAL "x86")
        message(STATUS "Building for ${ARCH} architecture")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -masm=intel -m32")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -masm=intel -m32")
        SET(ARCH_FILE_SUFFIX 32)
        SET(VCPKG_TARGET_TRIPLET x86-mingw-static-custom)
        SET(VCPKG_HOST_TRIPLET x86-mingw-static-custom)
    elseif(ARCH STREQUAL "x64")
        message(STATUS "Building for ${ARCH} architecture")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -masm=intel -m64")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -masm=intel -m64")
        SET(ARCH_FILE_SUFFIX 64)
        SET(VCPKG_TARGET_TRIPLET x64-mingw-static-custom)
        SET(VCPKG_HOST_TRIPLET x64-mingw-static-custom)
    else()
        message(ERROR "Unknown architecture: ${ARCH}")
    endif()
else()
    message(STATUS "No architecture specified, using x86")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -masm=intel -m32")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -masm=intel -m32")
    SET(ARCH_FILE_SUFFIX 32)
    SET(VCPKG_TARGET_TRIPLET x86-mingw-static-custom)
    SET(VCPKG_HOST_TRIPLET x86-mingw-static-custom)
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
set(CMAKE_CXX_STANDARD_LIBRARIES "${CMAKE_CXX_STANDARD_LIBRARIES} -lc++ -lc++abi")
