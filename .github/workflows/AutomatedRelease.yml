name: "Automated Release"

on:
  push:
    branches:
      - master

jobs:
  build:
    name: "Build"
    runs-on: "windows-latest"
    strategy:
      matrix:
        BUILD_PLATFORM: [x86, x64]
    env:
      RELEASE_TYPE: "" # Use -alpha, -beta, or -rc for pre-release. An empty string for stable.
      BUILD_CONFIG: "Release"
      BUILD_PLATFORM: ${{matrix.BUILD_PLATFORM}}
      SOLUTION: "ProcessMemory.sln"
      PROJECT: "src/ProcessMemory/ProcessMemory.csproj"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current UTC DateTime
        id: get-datetime
        run: echo ('UTCDateTime=' + [System.DateTime]::UtcNow.ToString("yyyyMMddHHmmss")) >> $env:GITHUB_OUTPUT

      - name: Get project version information
        id: project-versions
        run: Select-String -Path "$env:PROJECT" '<(?<TagName>\w*?Version)>(?<Major>\d+)(?:\.(?<Minor>\d+))(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?(?:\.(?<Patch>\d+)|-(?<Quality>\w+)|\+(?<Tag>\w+))?</\w*?Version>' -AllMatches | Foreach-Object -Process {$_.Matches} | Foreach-Object -Process { $tagName = $_.Groups["TagName"].Value; $_.Groups | Where-Object { $_.Name -ne "0" -and $_.Name -ne "TagName"; } } | Foreach-Object -Process { $tagName + "_" + $_.Name + "=" + $_.Value >> $env:GITHUB_OUTPUT }

      - name: Set project version string
        id: project-version-string
        run: |
          echo 'Version=${{steps.project-versions.outputs.Version_Major}}.${{steps.project-versions.outputs.Version_Minor}}.${{steps.project-versions.outputs.Version_Patch}}${{env.RELEASE_TYPE}}.${{steps.get-datetime.outputs.UTCDateTime}}' >> $env:GITHUB_OUTPUT

      - name: Ensure we detected the version properly
        id: assert-version
        if: ${{ steps.project-version-string.outputs.Version == format('..{0}.', env.RELEASE_TYPE) }}
        run: exit 1

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          dotnet-quality: "ga"

      - name: Restore
        run: dotnet restore $env:SOLUTION --verbosity normal

      - name: Build
        run: dotnet build $env:SOLUTION /p:"Configuration=$env:BUILD_CONFIG;Platform=$env:BUILD_PLATFORM;VERSION=${{steps.project-version-string.outputs.Version}}" --no-restore --verbosity normal

      - name: Run tests
        run: dotnet test /p:"Configuration=$env:BUILD_CONFIG;Platform=$env:BUILD_PLATFORM;VERSION=${{steps.project-version-string.outputs.Version}}" --no-restore --no-build --verbosity normal

      - name: Publish
        run: nuget push **\*.nupkg -Source "https://api.nuget.org/v3/index.json" -ApiKey "${{secrets.NUGET_API_KEY}}" -SkipDuplicate
