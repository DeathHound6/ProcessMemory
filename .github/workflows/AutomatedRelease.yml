name: "Automated Release"

on:
  push:
    branches:
      - master

jobs:
  Build:
    name: "Build, Test, and Publish Project"
    runs-on: "windows-latest"
    defaults:
      run:
        shell: "pwsh"
    strategy:
      matrix:
        BUILD_PLATFORM: [x86, x64]
    env:
      BUILD_CONFIG: Release
      RELEASE_TYPE_TAG: "-beta" # For the moment, everything is beta.
      RUN_LINTERS: false # These are not ready yet.
      RUN_UNIT_TESTS: false # These are not ready yet.
      BUILD_PLATFORM: ${{matrix.BUILD_PLATFORM}}
      SOLUTION: ProcessMemory.sln
      CSPROJECT: src/ProcessMemory/ProcessMemory.csproj
      VERSION: 0.1.0

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{github.ref}}

      - name: Get C# project version
        uses: Squirrelies/CI-CD/GetCSProjVersion@main
        id: Get-CSProj-Version
        with:
          repository: ${{github.repository}}
          ref: ${{github.ref}}
          csproj-path: ${{env.CSPROJECT}}

      - name: Get UTC DateTime
        uses: Squirrelies/CI-CD/GetUTCDateTime@main
        id: Get-UTC-DateTime

      - name: Set VERSION environment variable
        run: echo 'VERSION=${{steps.Get-CSProj-Version.outputs.Version}}${{env.RELEASE_TYPE_TAG}}.${{steps.Get-UTC-DateTime.outputs.UTC-DateTime}}' >> $env:GITHUB_ENV

      - name: Build Native Library
        uses: Squirrelies/CI-CD/BuildMSYS2CMakeVCPkgProject@main
        id: build-native-library
        with:
          root-path: ./src/ProcessMemoryNative
          msys2-msystem: ${{ matrix.BUILD_PLATFORM == 'x64' && 'clang64' || 'mingw32' }}
          msys2-packages: ${{ matrix.BUILD_PLATFORM == 'x64' && 'base-devel mingw-w64-clang-x86_64-toolchain mingw-w64-clang-x86_64-cmake mingw-w64-x86_64-clang-tools-extra' || 'base-devel mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-clang mingw-w64-i686-lld mingw-w64-i686-clang-tools-extra mingw-w64-i686-libc++ mingw-w64-i686-headers-git' }}
          #vcpkg-root: C:/VCPkg
          preset-configuration: ${{env.BUILD_CONFIG}}
          preset-configuration-tidy: ${{ env.RUN_LINTERS == true && format('{0}-Tidy', env.BUILD_CONFIG) || ''}}
          run-unit-tests: ${{env.RUN_UNIT_TESTS}}
          additional-cmake-args: -DARCH=${{matrix.BUILD_PLATFORM}}

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
          dotnet-quality: "ga"

      - name: Restore NuGet Packages
        run: dotnet restore $env:SOLUTION --verbosity normal

      - name: Build .NET Project
        run: dotnet build $env:SOLUTION /p:"Configuration=${{env.BUILD_CONFIG}};Platform=$env:BUILD_PLATFORM;VERSION=$env:VERSION" --no-restore --verbosity normal

      - name: Run .NET Project Unit Tests
        run: dotnet test /p:"Configuration=${{env.BUILD_CONFIG}};Platform=$env:BUILD_PLATFORM;VERSION=$env:VERSION" --no-restore --no-build --verbosity normal

      - name: Publish NuGet Package
        run: nuget push **\*.nupkg -Source "https://api.nuget.org/v3/index.json" -ApiKey "${{secrets.NUGET_API_KEY}}" -SkipDuplicate
