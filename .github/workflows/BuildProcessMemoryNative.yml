name: "Build and Publish"

on:
  # push:
  #   branches:
  #     - master
  workflow_dispatch:
    inputs:
      configuration: # Use alpha, beta, or rc for pre-release. An empty string for stable.
        description: "Build Configuration"
        required: true
        default: "Release"
        type: choice
        options:
          - "Release"
          - "Debug"
          - "RelWithDebInfo"
          - "MinSizeRel"
      architecture: # Use alpha, beta, or rc for pre-release. An empty string for stable.
        description: "Build Architecture"
        required: true
        default: "x86_64"
        type: choice
        options:
          - "x86_64"
          - "x86_32"
      versionMajor:
        description: "Major Version"
        required: false
        default: 0
        type: number
      versionMinor:
        description: "Minor Version"
        required: false
        default: 1
        type: number
      versionPatch:
        description: "Patch Version"
        required: false
        default: 0
        type: number
      versionPreReleaseTag: # Use alpha, beta, or rc for pre-release. An empty string for stable.
        description: "Pre-Release Tag"
        required: true
        default: "alpha"
        type: choice
        options:
          - "alpha"
          - "beta"
          - "RC"
          - ""
      clangTidy:
        description: "Run Clang-Tidy"
        required: false
        default: false
        type: boolean
      unitTests:
        description: "Run Unit Tests"
        required: false
        default: false
        type: boolean

env:
  VCPKG_ROOT: C:/vcpkg
  MSYS2SYSTEM: ${{ inputs.architecture == 'x86_64' && 'clang64' || (inputs.architecture == 'x86_32' && 'mingw32' || 'mingw32') }}

jobs:
  Setup:
    name: Setup Environment
    runs-on: windows-latest

    outputs:
      build-number: ${{steps.build-number.outputs.current_build_number}}
      short-sha-hash: ${{steps.short-sha-hash.outputs.short_sha_hash}}
      semver-string: ${{steps.semver-string.outputs.semver_string}}

    steps:
      - name: Get new build number
        id: build-number
        run: |
          $build_number = $((${{ vars.BUILD_NUMBER }} + 1))
          echo "current_build_number=$build_number" | Set-Content $env:GITHUB_OUTPUT

      - name: Get short SHA hash
        id: short-sha-hash
        run: |
          $short_sha_hash = $(("${{ github.sha }}".substring(0, 7)))
          echo "short_sha_hash=$short_sha_hash" | Set-Content $env:GITHUB_OUTPUT

      - name: Get SemVer string
        id: semver-string
        run: |
          [string]$semver_string = "${{inputs.versionMajor}}.${{inputs.versionMinor}}.${{inputs.versionPatch}}";
          if (![string]::IsNullOrWhitespace("${{inputs.versionPreReleaseTag}}")) {
            $semver_string += "-${{inputs.versionPreReleaseTag}}";
          }
          $semver_string += "+${{steps.build-number.outputs.current_build_number}}";
          $semver_string += ".${{steps.short-sha-hash.outputs.short_sha_hash}}";
          echo "semver_string=$semver_string" | Set-Content $env:GITHUB_OUTPUT;

  Build:
    name: Build ${{inputs.configuration}}
    runs-on: windows-latest
    needs: Setup

    defaults:
      run:
        shell: pwsh

    env:
      RC_VERSION_MAJOR: ${{inputs.versionMajor}}
      RC_VERSION_MINOR: ${{inputs.versionMinor}}
      RC_VERSION_PATCH: ${{inputs.versionPatch}}
      RC_VERSION_BUILD: ${{needs.Setup.outputs.build-number}}
      RC_VERSION_PRERELEASE_TAG: ${{inputs.versionPreReleaseTag}}
      RC_VERSION_BUILD_HASH: ${{needs.Setup.outputs.short-sha-hash}}

    steps:
      - name: Setup MSYS2 ${{ env.MSYS2SYSTEM }} 64-bit
        uses: msys2/setup-msys2@v2
        if: ${{ inputs.architecture == 'x86_64' }}
        with:
          msystem: ${{ env.MSYS2SYSTEM }}
          install: base-devel mingw-w64-clang-x86_64-toolchain mingw-w64-clang-x86_64-cmake mingw-w64-x86_64-clang-tools-extra

      - name: Setup MSYS2 ${{ env.MSYS2SYSTEM }} 32-bit
        uses: msys2/setup-msys2@v2
        if: ${{ inputs.architecture == 'x86_32' }}
        with:
          msystem: ${{ env.MSYS2SYSTEM }}
          install: base-devel mingw-w64-i686-toolchain mingw-w64-i686-cmake mingw-w64-i686-clang mingw-w64-i686-clang-tools-extra mingw-w64-i686-libc++ mingw-w64-i686-headers-git

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Enter project directory
        run: cd src/ProcessMemoryNative

      - name: Run CMake
        shell: msys2 {0}
        run: cmake --workflow --preset ${{inputs.configuration}} -DARCH=${{ inputs.architecture == 'x86_64' && 'x64' || (inputs.architecture == 'x86_32' && 'x86' || 'x86') }} --fresh

      - name: Run Clang-Tidy
        if: ${{ !cancelled() && inputs.clangTidy == 'true' }}
        shell: msys2 {0}
        run: cmake --workflow --preset ${{inputs.configuration}}-Tidy --fresh

      - name: Run CTest
        if: ${{ !cancelled() && inputs.unitTests == 'true' }}
        shell: msys2 {0}
        run: ctest --preset ${{inputs.configuration}} --output-on-failure

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ProcessMemory.Native_v${{needs.Setup.outputs.semver-string}}_${{ inputs.architecture == 'x86_64' && '64' || '32' }}_${{inputs.configuration}}
          path: build/ProcessMemory.Native.${{ inputs.architecture == 'x86_64' && '64' || '32' }}.dll

  PostRun:
    name: Post-Run
    runs-on: windows-latest
    needs: [Setup, Build]

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Update build number variable
        env:
          GH_TOKEN: ${{ secrets.GH_VARIABLE_RW_TOKEN }}
        run: gh variable set BUILD_NUMBER -b${{ needs.Setup.outputs.build-number }}
